
#include"nuc972_gpio.h"


static DEFINE_SPINLOCK(gpio_lock);


struct gpio_port {
	volatile unsigned int * dir;
	volatile unsigned int * out;
	volatile unsigned int * in;
};

const struct gpio_port port_class[] = {
	{(volatile unsigned int *)REG_GPIOA_DIR, (volatile unsigned int *)REG_GPIOA_DATAOUT,
	 (volatile unsigned int *)REG_GPIOA_DATAIN},
	{(volatile unsigned int *)REG_GPIOB_DIR, (volatile unsigned int *)REG_GPIOB_DATAOUT,
	 (volatile unsigned int *)REG_GPIOB_DATAIN},
	{(volatile unsigned int *)REG_GPIOC_DIR, (volatile unsigned int *)REG_GPIOC_DATAOUT,
	 (volatile unsigned int *)REG_GPIOC_DATAIN},
	{(volatile unsigned int *)REG_GPIOD_DIR, (volatile unsigned int *)REG_GPIOD_DATAOUT,
	 (volatile unsigned int *)REG_GPIOD_DATAIN},
	{(volatile unsigned int *)REG_GPIOE_DIR, (volatile unsigned int *)REG_GPIOE_DATAOUT,
	 (volatile unsigned int *)REG_GPIOE_DATAIN},
	{(volatile unsigned int *)REG_GPIOF_DIR, (volatile unsigned int *)REG_GPIOF_DATAOUT,
	 (volatile unsigned int *)REG_GPIOF_DATAIN},
	{(volatile unsigned int *)REG_GPIOG_DIR, (volatile unsigned int *)REG_GPIOG_DATAOUT,
	 (volatile unsigned int *)REG_GPIOG_DATAIN},
	{(volatile unsigned int *)REG_GPIOH_DIR, (volatile unsigned int *)REG_GPIOH_DATAOUT,
	 (volatile unsigned int *)REG_GPIOH_DATAIN},
	{(volatile unsigned int *)REG_GPIOI_DIR, (volatile unsigned int *)REG_GPIOI_DATAOUT,
	 (volatile unsigned int *)REG_GPIOI_DATAIN},
	{(volatile unsigned int *)REG_GPIOJ_DIR, (volatile unsigned int *)REG_GPIOJ_DATAOUT,
         (volatile unsigned int *)REG_GPIOJ_DATAIN},
	{},
};


void set_gpio_direction(unsigned int gpio_port,unsigned reg)
{

	const struct gpio_port *port;

        port=&port_class[gpio_port];

	spin_lock(&gpio_lock);
	__raw_writel(reg, port->dir);
	spin_unlock(&gpio_lock);
	printk (KERN_INFO "gpio %d dir is set to %d\n",gpio_port,reg);

}
int get_gpio_direction(unsigned int gpio_port)
{
	int reg;
	const struct gpio_port *port;
        port=&port_class[gpio_port];
	reg=__raw_readl(port->dir);
	printk (KERN_INFO "gpio %d dir read \n",gpio_port);
	return reg;

}
void set_gpio_odr(unsigned int gpio_port,unsigned reg)
{

	const struct gpio_port *port;

        port=&port_class[gpio_port];

	spin_lock(&gpio_lock);
	__raw_writel(reg, port->out);
	spin_unlock(&gpio_lock);
	printk (KERN_INFO "gpio %d dir is set to %d\n",gpio_port,reg);

}
int get_gpio_odr(unsigned int gpio_port)
{
	int reg;
	const struct gpio_port *port;
        port=&port_class[gpio_port];
	reg=__raw_readl(port->out);
	printk (KERN_INFO "gpio %d dir read \n",gpio_port);
	return reg;

}
int get_gpio_idr(unsigned int gpio_port)
{
	int reg;
	const struct gpio_port *port;
        port=&port_class[gpio_port];
	reg=__raw_readl(port->in);
	printk (KERN_INFO "gpio %d inr read \n",gpio_port);
	return reg;

}


